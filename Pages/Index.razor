@page "/"
@using MatBlazor;

<b>Add Employee</b>
<MatButton Outlined="true" @onclick="@(e=>OpenDialog(false))">Add Employee</MatButton>
<hr />
<MatTable Items="@employees" Class="mat-elevation-z3" AllowSelection="true" SelectionChanged="SelectionChangedEvent" FilterByColumnName="Name">
    <MatTableHeader>
        <th>ID</th>
        <th>Name</th>
        <th>Gender</th>
        <th>Job Experience</th>
        <th>Joining Date</th>
        <th>Action</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.EmployeeId</td>
        <td>@context.Name</td>
        <td>@context.Gender</td>
        <td>@context.YearOfExperience</td>
        <td>@context.JoiningDate</td>
        <td>
            <MatButton Outlined="true" @onclick="@(e=>OpenDialog(false))" Icon="Edit">Edit Employee</MatButton>
            <MatButton Outlined="true" @onclick="DeleteEmployee" Icon="_restore_from_trash" >Delete Employee</MatButton>
        </td>
    </MatTableRow>
</MatTable>
<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogTitle>Add/Edit Employee</MatDialogTitle>
    <MatDialogContent>
        <MatTextField Label="Employee Name" @bind-Value="@employee.Name"></MatTextField>
        <MatRadioGroup @bind-Value="@employee.Gender" TValue="string">
            <MatRadioButton Value="@("Male")" TValue="string">Male</MatRadioButton>
            <MatRadioButton Value="@("Male")" TValue="string">Male</MatRadioButton>

        </MatRadioGroup>
        <MatDatePicker Label="Joining Date" @bind-Value="@employee.JoiningDate"></MatDatePicker>
        <MatNumericUpDownField Label="Job Exp" @bind-Value="@employee.YearOfExperience" DecimalPlaces=0 Minimum=0 Maximum="100"/>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="OkClick">Add</MatButton>
        <MatButton OnClick="CloseDialog">Add</MatButton>
    </MatDialogActions>
    <MatSnackbar @bind-IsOpen="@snackbar" Leading="true">
        <MatSnackbarContent>Employee Deleted</MatSnackbarContent>
        <MatSnackbarActions>
            <MatButton Raised="true" @onclick="UndoDelete">Undo</MatButton>
        </MatSnackbarActions>
        </MatSnackbar>
</MatDialog>
@code
{
    Employee employee = new Employee();
    Employee selectedEmp = null;
    Employee tempEmp = null;
    int _index = -1;
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    bool snackbar = false;

    List<Employee> employees = new List<Employee>()
    {
        new Employee(1,"Claricia","Female",Convert.ToDateTime("02-12-2000"),4),
        new Employee(2,"Shica","Female",Convert.ToDateTime("12-12-1976"),2),
        new Employee(3,"Shifan","Male",Convert.ToDateTime("02-06-1991"),5),
        new Employee(4,"Rohan","Male",Convert.ToDateTime("22-06-1992"),5)


    };

  
    private void AddEmployee(Employee emp)
    {
        emp.EmployeeId = employees.Count + 1;
        employees.Add(emp);

    }
    private void EditEmployee(Employee emp)
    {
        if(emp!=null && emp.EmployeeId>0)
        {
            int index = employees.FindIndex(a => a.EmployeeId == emp.EmployeeId);
            employees.RemoveAll(x => x.EmployeeId == emp.EmployeeId);
            employees.Insert(index, emp);
        }
        emp.EmployeeId = employees.Count + 1;
        employees.Add(emp);

    }
    private void DeleteEmployee()
    {
        _isDelete = true;
        if (employee != null && employee.EmployeeId > 0)
        {
            
            _index = employees.FindIndex(a => a.EmployeeId == employee.EmployeeId);
            tempEmp = new Employee(employee.EmployeeId, employee.Name, employee.Gender, employee.JoiningDate, employee.YearOfExperience);
            snackbar = true;
            employees.Remove(employee);
            _isDelete = false;
            this.StateHasChanged();
        }



    }
    private void UndoDelete()
    {
        if(tempEmp!=null && _index >0)
        {
            employees.Insert(_index, tempEmp);
            tempEmp = null;
            _index = -1;
        }
    }

    private void OpenDialog(bool isEdit)
    {
        _isEdit = isEdit;
        if (!_isEdit) employee = new Employee();
        dialogIsOpen = true;
    }
    private void OkClick() //Save Employee Details
    {
        dialogIsOpen = false;
        if (!_isEdit) this.AddEmployee(employee);
        else this.EditEmployee(employee);

    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        if(selectedEmp !=null)
        {
            employee = selectedEmp;
            this.EditEmployee(selectedEmp);
        }
    }
    private void SelectionChangedEvent(object emp)
    {
        var currentEmp = (Employee)emp;
        if (currentEmp != null)
        {
            employee = currentEmp;
            selectedEmp = new Employee(currentEmp.EmployeeId, currentEmp.Name, currentEmp.Gender, currentEmp.JoiningDate, currentEmp.YearOfExperience);
        }
        else
        {
            selectedEmp = new Employee();
        }
    }
   



    public class Employee
    {
        public int EmployeeId { get; set; }
        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime JoiningDate { get; set; }
        public int YearOfExperience { get; set; }

        
        public Employee() { }
        public Employee(int employeeId,string name,string gender,DateTime joiningDate,int yearofexperience)
        {
            EmployeeId = employeeId;
            Name = name;
            Gender = gender;
            JoiningDate = joiningDate;
            YearOfExperience = yearofexperience;

        }

    }
}
